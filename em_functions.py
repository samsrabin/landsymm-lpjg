#!/bin/env python
import numpy as np


def emulate(K, c, t, w, n, case, is_irrig):
    '''
    Cases:
        NN: no nitrogen
        NNI: no nitrogen, irrigated
        N: with nitrogen
        NI: with nitrogen, irrigated
    '''
    if case == "NN":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * w
            + K[4, :, :] * c ** 2
            + K[5, :, :] * t ** 2
            + K[6, :, :] * w ** 2
            + K[7, :, :] * c * w
            + K[8, :, :] * t * w
            + K[9, :, :] * t ** 3
            + K[10, :, :] * w ** 3
            + K[11, :, :] * t ** 2 * w
            + K[12, :, :] * w ** 2 * t
        )

    elif case == "NNI":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * c ** 2
            + K[4, :, :] * t ** 2
            + K[5, :, :] * t ** 3
        )

    elif case == "N":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * w
            + K[4, :, :] * n
            + K[5, :, :] * c ** 2
            + K[6, :, :] * t ** 2
            + K[7, :, :] * w ** 2
            + K[8, :, :] * n ** 2
            + K[9, :, :] * c * w
            + K[10, :, :] * c * n
            + K[11, :, :] * t * w
            + K[12, :, :] * t * n
            + K[13, :, :] * w * n
            + K[14, :, :] * t ** 3
            + K[15, :, :] * w ** 3
            + K[16, :, :] * t * w * n
            + K[17, :, :] * t ** 2 * w
            + K[18, :, :] * w ** 2 * t
            + K[19, :, :] * w ** 2 * n
            + K[20, :, :] * n ** 2 * c
            + K[21, :, :] * n ** 2 * t
            + K[22, :, :] * n ** 2 * w
        )

    elif case == "NI":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * n
            + K[4, :, :] * c ** 2
            + K[5, :, :] * t ** 2
            + K[6, :, :] * n ** 2
            + K[7, :, :] * c * n
            + K[8, :, :] * t * n
            + K[9, :, :] * t ** 3
            + K[10, :, :] * n ** 2 * c
            + K[11, :, :] * n ** 2 * t
        )

    elif case == "NL":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * w
            + K[4, :, :] * n
            + K[5, :, :] * c ** 2
            + K[6, :, :] * t ** 2
            + K[7, :, :] * w ** 2
            + K[8, :, :] * n ** 2
            + K[9, :, :] * c * w
            + K[10, :, :] * c * n
            + K[11, :, :] * t * w
            + K[12, :, :] * t * n
            + K[13, :, :] * w * n
            + K[14, :, :] * t ** 3
            + K[15, :, :] * w ** 3
            + K[16, :, :] * t * w * n
            + K[17, :, :] * t ** 2 * w
            + K[18, :, :] * w ** 2 * t
            + K[19, :, :] * w ** 2 * n
            + K[20, :, :] * n ** 2 * c
            + K[21, :, :] * n ** 2 * t
            + K[22, :, :] * n ** 2 * w
            + K[23, :, :] * n ** 3
        )

    elif case == "NIL":
        Y = (
            K[0, :, :]
            + K[1, :, :] * c
            + K[2, :, :] * t
            + K[3, :, :] * n
            + K[4, :, :] * c ** 2
            + K[5, :, :] * t ** 2
            + K[6, :, :] * n ** 2
            + K[7, :, :] * c * n
            + K[8, :, :] * t * n
            + K[9, :, :] * t ** 3
            + K[10, :, :] * n ** 2 * c
            + K[11, :, :] * n ** 2 * t
            + K[12, :, :] * n ** 3
        )

    Y = np.nan_to_num(Y)

    # Limit output values
    Y[Y < 0] = 0
    if not is_irrig:
        Y[Y > 30] = 30
    return Y
